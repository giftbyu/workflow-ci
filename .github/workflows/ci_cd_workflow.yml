name: Automated Model Training and Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DAGSHUB_URI: https://dagshub.com/giftbyu/mlops.mlflow
  DOCKER_IMAGE_NAME: septbyu/workflow-ci 
  EXPERIMENT_NAME: "WaterPotability_Tuning_CI"
  CONDA_ENV_NAME: "water-potability-env"
  PROJECT_FOLDER: "MLProject_folder"

jobs:
  train-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Set up Miniconda and Create Training Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ${{ env.CONDA_ENV_NAME }}
          environment-file: ${{ env.PROJECT_FOLDER }}/conda.yaml
          auto-update-conda: true
          auto-activate-base: false

      - name: 3. Run MLflow Project to Train Tuned Model
        id: train_step
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0}
        run: |
          cd ${{ env.PROJECT_FOLDER }}
          mlflow run . --experiment-name "$EXPERIMENT_NAME" 2>&1 | tee mlflow_output.txt
          RUN_ID=$(grep -oP "MLflow Run ID: \K[a-f0-9]{32}" mlflow_output.txt)
          if [ -z "$RUN_ID" ]; then
            echo "::error::RUN_ID extraction failed!"
            cat mlflow_output.txt
            exit 1
          fi
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "Extracted RUN_ID: $RUN_ID"

      - name: 4. Download Model Artifacts
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0}
        run: |
          echo "Downloading artifacts for RUN_ID: ${{ env.RUN_ID }}"
          
          # Download langsung ke folder model
          mkdir -p model
          mlflow artifacts download --run-id "${{ env.RUN_ID }}" --artifact-path model -d ./model
          
          echo "Model files:"
          ls -l model
          [ -f "model/MLmodel" ] || { echo "::error::MLmodel missing!"; exit 1; }

      - name: 5. Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 6. Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 7. Upgrade MLflow
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV_NAME }}
          pip install --upgrade mlflow==2.19.0

      - name: 8. Build Docker Image with MLflow
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0}
        run: |
          # Reset Docker environment variables
          unset DOCKER_HOST
          unset DOCKER_TLS_VERIFY
          unset DOCKER_CERT_PATH
          
          conda activate ${{ env.CONDA_ENV_NAME }}
          
          echo "MLflow version: $(mlflow --version)"
          echo "Building Docker image..."
          
          mlflow models build-docker -m "runs:/${{ env.RUN_ID }}/model" -n "${{ env.DOCKER_IMAGE_NAME }}"
          
          echo "Verifying Docker image..."
          docker images | grep "${{ env.DOCKER_IMAGE_NAME }}"

      - name: 9. Push Docker Image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest