name: Kriteria 3 - Workflow CI-CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DAGSHUB_URI: https://dagshub.com/giftbyu/mlops.mlflow
  EXPERIMENT_NAME: "WaterPotability"
  DOCKER_IMAGE_NAME: giftbyu/workflow-ci

jobs:
  train-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: '3.12.7'
          activate-environment: "mlflow-env"
          auto-update-conda: true
          auto-activate-base: false

      - name: Install MLflow & Dependencies
        run: |
          pip install mlflow dagshub pandas scikit-learn matplotlib seaborn imbalanced-learn packaging protobuf

      - name: Run MLflow Project to Retrain Model
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          eval "$(conda shell.bash hook)"
          conda activate mlflow-env
          mlflow run MLProject_folder \
            --experiment-name "$EXPERIMENT_NAME"

      - name: Get Latest Run ID
        id: get-run-id
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
          EXPERIMENT_NAME: ${{ env.EXPERIMENT_NAME }}
        run: |
          eval "$(conda shell.bash hook)"
          conda activate mlflow-env
          python -c "
          import mlflow
          from mlflow.tracking import MlflowClient
          
          # Setup client
          client = MlflowClient()
          
          # Cari atau buat eksperimen
          experiment = client.get_experiment_by_name('$EXPERIMENT_NAME')
          if not experiment:
              experiment_id = client.create_experiment('$EXPERIMENT_NAME')
              experiment = client.get_experiment(experiment_id)
          
          # Dapatkan run terbaru
          runs = client.search_runs(
              experiment_ids=[experiment.experiment_id],
              order_by=['attributes.start_time DESC'],
              max_results=1
          )
          
          if runs:
              run_id = runs[0].info.run_id
              print(f'RUN_ID={run_id}')
          else:
              print('No runs found')
              exit(1)
          " >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest