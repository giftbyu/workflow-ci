name: Automated Model Training and Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DAGSHUB_URI: https://dagshub.com/giftbyu/mlops.mlflow
  DOCKER_IMAGE_NAME: giftbyu/workflow-ci
  EXPERIMENT_NAME: "WaterPotability_Tuning_CI"
  CONDA_ENV_NAME: "water-potability-env"
  PROJECT_FOLDER: "MLProject_folder"

jobs:
  train-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Set up Miniconda and Create Training Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ${{ env.CONDA_ENV_NAME }}
          environment-file: ${{ env.PROJECT_FOLDER }}/conda.yaml
          auto-update-conda: true
          auto-activate-base: false
          use-only-tar-bz2: true

      - name: 3. Run MLflow Project to Train Tuned Model
        id: train_step
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0}
        run: |
          echo "--- Starting MLflow Run ---"
          mlflow run ${{ env.PROJECT_FOLDER }} --experiment-name "$EXPERIMENT_NAME" > mlflow_output.txt
          echo "--- MLflow Run Output ---"
          cat mlflow_output.txt
          echo "------------------------"
          
          RUN_ID=$(grep -oP "MLflow Run ID: \K.+" mlflow_output.txt | tr -d '[:space:]')
          
          if [ -z "$RUN_ID" ]; then
            echo "::error::Failed to extract RUN_ID from MLflow output. The 'grep' command likely found no match. Aborting."
            exit 1
          fi
          
          echo "Successfully extracted RUN_ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: 4. Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 4.5 Create Dockerfile
        run: |
          cat <<EOT > Dockerfile
          FROM python:3.12-slim
          
          ARG RUN_ID
          ARG MLFLOW_TRACKING_URI
          ARG DAGSHUB_USERNAME
          ARG DAGSHUB_TOKEN
          
          ENV MLFLOW_TRACKING_URI=\$MLFLOW_TRACKING_URI
          ENV MLFLOW_TRACKING_USERNAME=\$DAGSHUB_USERNAME
          ENV MLFLOW_TRACKING_PASSWORD=\$DAGSHUB_TOKEN
          ENV RUN_ID=\$RUN_ID
          
          RUN pip install mlflow==2.19.0
          
          # Download model
          RUN mlflow models download -r \$RUN_ID -d /model
          
          EXPOSE 5000
          
          CMD ["mlflow", "models", "serve", "-m", "/model", "-p", "5000"]
          EOT
          
          echo "Dockerfile created:"
          cat Dockerfile

      - name: 5. Build and Push Docker Image with the Newly Trained Model
        run: |
          echo "Building Docker image for RUN_ID: ${{ env.RUN_ID }}"
          echo "Current directory: $(pwd)"
          echo "Contents:"
          ls -la
          
          docker build \
            --build-arg RUN_ID=${{ env.RUN_ID }} \
            --build-arg MLFLOW_TRACKING_URI=${{ env.DAGSHUB_URI }} \
            --build-arg DAGSHUB_USERNAME=${{ secrets.DAGSHUB_USERNAME }} \
            --build-arg DAGSHUB_TOKEN=${{ secrets.DAGSHUB_TOKEN }} \
            -t ${{ env.DOCKER_IMAGE_NAME }}:latest \
            .
          
          echo "Pushing Docker image to Docker Hub..."
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest