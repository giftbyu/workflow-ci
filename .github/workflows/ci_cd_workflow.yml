name: Automated Model Training and Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DAGSHUB_URI: https://dagshub.com/giftbyu/mlops.mlflow
  DOCKER_IMAGE_NAME: septbyu/workflow-ci 
  EXPERIMENT_NAME: "WaterPotability_Tuning_CI"
  CONDA_ENV_NAME: "water-potability-env"
  PROJECT_FOLDER: "MLProject_folder"

jobs:
  train-build-push:
    runs-on: ubuntu-latest

    steps:
      # Langkah 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Langkah 2: Menyiapkan Miniconda
      - name: Set up Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          python-version: "3.12.7"
      
      # Langkah 3: Membuat lingkungan kerja virtual
      - name: Create Conda Environment
        shell: bash -l {0}
        run: conda env create -f MLProject_folder/conda.yaml --name ml-ci-env

      # Langkah 4: Menjalankan proyek MLflow
      - name: Run MLflow Project
        shell: bash -l {0}
        run: |
          conda activate ml-ci-env
          mlflow run ./MLProject_folder -P --n_estimators {n_estimators} --max_depth {max_depth} --min_samples_split {min_samples_split} --random_state {random_state} processed_data.csv
          # Pastikan run_id.txt di-generate di root repo
          echo $MLFLOW_RUN_ID > run_id.txt

      # Langkah 5: Membaca Run ID dari file
      - name: Read Run ID from File
        id: find_run_id
        run: |
          if [ ! -f run_id.txt ]; then
            echo "::error::run_id.txt not found!"
            exit 1
          fi
          RUN_ID=$(cat run_id.txt)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Using Run ID: $RUN_ID"

      # Langkah 6: Mengemas artefak model
      - name: Package Model Artifact
        id: package_artifact
        shell: bash -l {0}
        run: |
          RUN_ID=${{ steps.find_run_id.outputs.RUN_ID }}
          ARTIFACT_NAME="model-$RUN_ID.tar.gz"
          
          if [ ! -d "mlruns/0/$RUN_ID/artifacts/model" ]; then
            echo "::error::Model artifact not found!"
            ls -R mlruns/0/$RUN_ID/artifacts
            exit 1
          fi
          
          tar -czvf $ARTIFACT_NAME -C mlruns/0/$RUN_ID/artifacts/ model
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

      # Langkah 7: Setup rclone (diperbaiki)
      - name: Setup and Configure rclone
        run: |
          # 1. Simpan kredensial dengan format yang benar
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' | base64 -d > gdrive_credentials.json
          
          # 2. Install rclone menggunakan package manager
          sudo apt-get update
          sudo apt-get install -y rclone
          
          # 3. Konfigurasi otomatis
          mkdir -p ~/.config/rclone
          cat <<EOF > ~/.config/rclone/rclone.conf
          [gdrive]
          type = drive
          scope = drive
          service_account_file = $(pwd)/gdrive_credentials.json
          EOF

      # Langkah 8: Upload ke Google Drive
      - name: Upload to Google Drive
        run: |
          ARTIFACT_NAME="model-${{ steps.find_run_id.outputs.RUN_ID }}.tar.gz"
          REMOTE_NAME="model-run-${{ steps.find_run_id.outputs.RUN_ID }}.tar.gz"
          
          rclone copyto $ARTIFACT_NAME "gdrive:${{ secrets.GDRIVE_FOLDER_ID }}/$REMOTE_NAME" \
            --drive-acknowledge-abuse \
            --stats=5s \
            --progress

      # Langkah 9: Login ke Docker Hub
      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      # Langkah 10: Build dan Push Docker Image
      - name: Build and Push Docker Image
        if: github.event_name != 'pull_request'
        shell: bash -l {0}
        run: |
          RUN_ID=${{ steps.find_run_id.outputs.RUN_ID }}
          IMAGE_NAME="${{ secrets.DOCKERHUB_USERNAME }}/workflow-ci:latest"
          
          conda activate ml-ci-env
          mlflow models build-docker \
            --model-uri "runs:/$RUN_ID/model" \
            --name $IMAGE_NAME \
            --env-manager conda \
            --enable-mlserver
          
          docker push $IMAGE_NAME