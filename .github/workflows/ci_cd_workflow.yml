name: Automated Model Training and Deployment Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DAGSHUB_URI: https://dagshub.com/giftbyu/mlops.mlflow
  DOCKER_IMAGE_NAME: septbyu/workflow-ci 
  EXPERIMENT_NAME: "WaterPotability_Tuning_CI"
  CONDA_ENV_NAME: "water-potability-env"
  PROJECT_FOLDER: "MLProject_folder"

jobs:
  train-build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Set up Miniconda and Create Training Environment
        uses: conda-incubator/setup-miniconda@v3
        with:
          activate-environment: ${{ env.CONDA_ENV_NAME }}
          environment-file: ${{ env.PROJECT_FOLDER }}/conda.yaml
          auto-update-conda: true
          auto-activate-base: false

      - name: 3. Run MLflow Project to Train Tuned Model
        id: train_step
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0}
        run: |
          cd ${{ env.PROJECT_FOLDER }}
          mlflow run . --experiment-name "$EXPERIMENT_NAME" 2>&1 | tee mlflow_output.txt
          RUN_ID=$(grep -oP "MLflow Run ID: \K[a-f0-9]{32}" mlflow_output.txt)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: 4. Download Model Artifacts
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0}
        run: |
          echo "Downloading artifacts for RUN_ID: ${{ env.RUN_ID }}"
          if [ -z "${{ env.RUN_ID }}" ]; then
            echo "::error::RUN_ID is empty. Training step might have failed."
            exit 1
          fi
          mkdir -p model
          mlflow artifacts download --run-id "${{ env.RUN_ID }}" --artifact-path model -d ./model

      # Langkah baru: Archive model artifacts
      - name: 5. Archive Model Artifacts
        run: tar -czvf model-${{ env.RUN_ID }}.tar.gz model

      # Langkah baru: Setup rclone untuk upload ke Google Drive
      - name: 6. Setup and Configure rclone for GDrive Upload
        run: |
          echo '${{ secrets.GDRIVE_CREDENTIALS }}' > gdrive_credentials.json
          
          curl -O https://downloads.rclone.org/rclone-current-linux-amd64.zip
          unzip rclone-current-linux-amd64.zip
          sudo mv rclone-*-linux-amd64/rclone /usr/local/bin/
          
          mkdir -p ~/.config/rclone
          cat << EOF > ~/.config/rclone/rclone.conf
          [gdrive]
          type = drive
          scope = drive
          service_account_file = $(pwd)/gdrive_credentials.json
          EOF

      # Langkah baru: Upload ke Google Drive
      - name: 7. Upload Artifact to Google Drive
        run: |
          rclone copyto model-${{ env.RUN_ID }}.tar.gz "gdrive:${{ secrets.GDRIVE_FOLDER_ID }}/model-run-${{ env.RUN_ID }}.tar.gz"

      # Lanjutan proses Docker (nomor urut disesuaikan)
      - name: 8. Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 9. Create Dockerfile and Build Image
        run: |
          cat <<EOT > Dockerfile
          FROM python:3.12.7
          RUN pip install mlflow==2.19.0
          COPY model /model
          EXPOSE 5000
          CMD ["mlflow", "models", "serve", "-m", "/model", "--host", "0.0.0.0", "-p", "5000"]
          EOT
          docker build -t ${{ env.DOCKER_IMAGE_NAME }}:latest .

      - name: 10. Push Docker Image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest