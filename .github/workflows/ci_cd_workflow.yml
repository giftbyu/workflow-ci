name: Kriteria 3 - Workflow CI-CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DAGSHUB_URI: https://dagshub.com/giftbyu/mlops.mlflow
  EXPERIMENT_NAME: "WaterPotability"
  DOCKER_IMAGE_NAME: giftbyu/workflow-ci
  CONDA_ENV_NAME: "mlflow-project" 
  PROJECT_FOLDER: "MLProject_folder" 

jobs:
  train-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Miniconda and Create Environment from File
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ${{ env.CONDA_ENV_NAME }}
          environment-file: ${{ env.PROJECT_FOLDER }}/conda.yaml
          auto-update-conda: true
          auto-activate-base: false

      - name: Run MLflow Project to Retrain Model
        id: train_step
        env:
          MLFLOW_TRACKING_URI: ${{ env.DAGSHUB_URI }}
          MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
        shell: bash -l {0} 
        run: |
          # Jalankan mlflow dan simpan outputnya
          mlflow run ${{ env.PROJECT_FOLDER }} --experiment-name "$EXPERIMENT_NAME" > mlflow_output.txt
          
          # Tampilkan output untuk debugging
          cat mlflow_output.txt
          
          # Ekstrak RUN_ID dari output dan simpan ke GITHUB_ENV
          # Ini adalah cara yang lebih andal untuk mendapatkan ID
          RUN_ID=$(grep -oP "run with ID '\K[^']+" mlflow_output.txt)
          echo "Extracted RUN_ID: $RUN_ID"
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image with Correct Model
        run: |
          echo "Building Docker image for RUN_ID: ${{ env.RUN_ID }}"
          docker build --build-arg RUN_ID=${{ env.RUN_ID }} -t ${{ env.DOCKER_IMAGE_NAME }}:latest.
          docker push ${{ env.DOCKER_IMAGE_NAME }}:latest